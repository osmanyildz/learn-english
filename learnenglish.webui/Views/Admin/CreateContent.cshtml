<form action="/Admin/CreateContent" method="POST" enctype="multipart/form-data">

  <div class="container">
    <div class="row">
      <div class="col-12">

        <textarea name="deneme" id="editor"></textarea>

@* <div id="editor">
  </div> *@


        <button type="submit" class="btn btn-dark mt-5">Kaydet</button>
      </div>
    </div>
  </div>

</form>



<script src="https://cdn.ckeditor.com/4.22.1/standard/ckeditor.js"></script>

<script>
CKEDITOR.replace( 'editor' );
</script>

<script>
  CKFinder.widget( 'editor', {
	readOnly: true,
	width: '100%',
	height: 500
} );</script>


@* <script>
  CKFinder.widget( 'ckfinder-widget2', {
	displayFoldersPanel: false,
	height: 500,
	id: 'gallery',
	readOnly: true,
	readOnlyExclude: 'Toolbars',
	thumbnailDefaultSize: 143,
	width: '100%'
} );
</script>

<script>

CKEDITOR.stylesSet.add( 'editor', [
    // Block-level styles.
    { name: 'Blue Title', element: 'h2', styles: { color: 'Blue' } },
    { name: 'Red Title',  element: 'h3', styles: { color: 'Red' } },

    // Inline styles.
    { name: 'CSS Style', element: 'span', attributes: { 'class': 'my_style' } },
    { name: 'Marker: Yellow', element: 'span', styles: { 'background-color': 'Yellow' } }
]);
</script> *@





@* CkEditor5 için aşağıdaki kodlar *@

@* <script src="https://cdn.ckeditor.com/ckeditor5/41.1.0/classic/ckeditor.js"></script>

<script>
  class MyUploadAdapter {
    constructor( loader ) {
        // The file loader instance to use during the upload. It sounds scary but do not
        // worry — the loader will be passed into the adapter later on in this guide.
        this.loader = loader;
    }

    upload() {
        return this.loader.file
            .then( file => new Promise( ( resolve, reject ) => {
                this._initRequest();
                this._initListeners( resolve, reject, file );
                this._sendRequest( file );
            } ) );
    }

    // Aborts the upload process.
    abort() {
        if ( this.xhr ) {
            this.xhr.abort();
        }
    }
 _initRequest() {
        const xhr = this.xhr = new XMLHttpRequest();

        // Note that your request may look different. It is up to you and your editor
        // integration to choose the right communication channel. This example uses
        // a POST request with JSON as a data structure but your configuration
        // could be different.
        xhr.open( 'POST', '@Url.Action("UploadImage", "Admin")', true );
        xhr.responseType = 'json';
    }
      _initListeners( resolve, reject, file ) {
        const xhr = this.xhr;
        const loader = this.loader;
        @* const genericErrorText = `Dosya Yüklenemedi(Aynı dosyayı yüklemediğinizden emin olun): ${ file.name }.`; 

        xhr.addEventListener( 'error', () => reject( genericErrorText ) );
        xhr.addEventListener( 'abort', () => reject() );
        xhr.addEventListener( 'load', () => {
            const response = xhr.response;

            // This example assumes the XHR server's "response" object will come with
            // an "error" which has its own "message" that can be passed to reject()
            // in the upload promise.
            //
            // Your integration may handle upload errors in a different way so make sure
            // it is done properly. The reject() function must be called when the upload fails.
            if ( !response || response.error ) {
                return reject( response && response.error ? response.error.message : genericErrorText );
            }

            // If the upload is successful, resolve the upload promise with an object containing
            // at least the "default" URL, pointing to the image on the server.
            // This URL will be used to display the image in the content. Learn more in the
            // UploadAdapter#upload documentation.
            resolve( {
                default: response.url
            } );
        } );

        // Upload progress when it is supported. The file loader has the #uploadTotal and #uploaded
        // properties which are used e.g. to display the upload progress bar in the editor
        // user interface.
        if ( xhr.upload ) {
            xhr.upload.addEventListener( 'progress', evt => {
                if ( evt.lengthComputable ) {
                    loader.uploadTotal = evt.total;
                    loader.uploaded = evt.loaded;
                }
            } );
        }
    }
  _sendRequest( file ) {
        // Prepare the form data.
        const data = new FormData();

        @* data.append('upload', file );

        // Important note: This is the right place to implement security mechanisms
        // like authentication and CSRF protection. For instance, you can use
        // XMLHttpRequest.setRequestHeader() to set the request headers containing
        // the CSRF token generated earlier by your application.

        // Send the request.
        this.xhr.send( data ); 
        data.append('upload', file, file.name); // Yüklenen dosyanın adını ekleyin
this.xhr.send(data);

    }
}

function MyCustomUploadAdapterPlugin( editor ) {
    editor.plugins.get( 'FileRepository' ).createUploadAdapter = ( loader ) => {
        // Configure the URL to the upload script in your backend here!
        return new MyUploadAdapter( loader );
    };
}

  ClassicEditor
    .create( document.querySelector( '#editor' ),{
       extraPlugins: [ MyCustomUploadAdapterPlugin ],
    } )
    .then(editor=> {
      window.editor=editor;
    })
    .catch( error => {
      console.error( error );
    } );
    @* CKEDITOR.replace('#editor', {
    filebrowserUploadUrl: '/Admin/UploadImage'
}); 

</script> *@